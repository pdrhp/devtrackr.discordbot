import discord
from discord import ui
from typing import Optional

from src.utils.config import log_command
from src.bot.modals import DailyUpdateModal

class DailyUpdateView(ui.View):
    """View com bot√µes para atualizar ou cancelar uma atualiza√ß√£o di√°ria existente."""

    def __init__(self, user: discord.User, report_date: Optional[str] = None):
        super().__init__(timeout=300)
        self.user = user
        self.report_date = report_date

    @ui.button(label="Atualizar", style=discord.ButtonStyle.primary, emoji="üìù")
    async def update_button(self, interaction: discord.Interaction, button: ui.Button):
        """Bot√£o para atualizar uma daily j√° existente."""
        if interaction.user.id != self.user.id:
            await interaction.response.send_message(
                "Voc√™ n√£o pode interagir com estes bot√µes, pois n√£o s√£o destinados a voc√™.",
                ephemeral=True
            )
            return

        await interaction.response.send_modal(DailyUpdateModal(self.report_date, self.user))
        log_command("DAILY UPDATE", interaction.user, f"/daily{f' data={self.report_date}' if self.report_date else ''}", "Modal aberto para atualiza√ß√£o")

    @ui.button(label="Cancelar", style=discord.ButtonStyle.secondary, emoji="‚ùå")
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        """Bot√£o para cancelar a atualiza√ß√£o."""
        if interaction.user.id != self.user.id:
            await interaction.response.send_message(
                "Voc√™ n√£o pode interagir com estes bot√µes, pois n√£o s√£o destinados a voc√™.",
                ephemeral=True
            )
            return

        await interaction.response.edit_message(
            content="Atualiza√ß√£o cancelada.",
            view=None
        )
        log_command("DAILY UPDATE", interaction.user, f"/daily{f' data={self.report_date}' if self.report_date else ''}", "Atualiza√ß√£o cancelada pelo usu√°rio")